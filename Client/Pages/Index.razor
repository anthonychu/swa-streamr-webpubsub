@page "/"
@using System.Net.WebSockets
@using System.Text
@using System.Text.Json
@using ServerlessStreamR.Client.Models
@using ServerlessStreamR.Shared

@inject HttpClient Http
@inject IJSRuntime JSRuntime;
@inject NavigationManager NavManager;

<PageTitle>Blazor ASCII Camera</PageTitle>

<div class="video-content">
    <h2>@Domain</h2>
    <div>
        <b>@StreamCount streaming</b>
        @if (!connected)
        {
            <span style="margin-left: 12px;">connecting...</span>
        }
    </div>
    <hr />
    <div class="user-video">
        <pre>@asciiVideo</pre>
        @if (connected)
        {
            @if (IsLoggedIn)
            {
                @username @:&nbsp;
                @if (videoStarted)
                {
                    <button type="button" class="btn btn-primary" @onclick="StopVideo">Stop</button>
                }
                else
                {
                    <button type="button" class="btn btn-primary" @onclick="StartVideo" >Start</button>
                    <button type="button" class="btn" @onclick="Logout" >Logout</button>
                }
            }
            else
            {
                <button type="button" class="btn btn-primary" @onclick="Login" >Login</button>
            }
        }
    </div>

    @foreach (var video in otherVideos)
    {
        <div class="user-video">
            <pre>@video.Frame?.Ascii</pre>
            @video.Frame?.Username
        </div>
    }
</div>

<footer class="footer">
    <hr />
    <span class="text-secondary">Powered by Blazor WebAssembly, Azure Static Web Apps, Azure Web PubSub, Azure Functions</span>
    <canvas id="myCanvas"></canvas>
</footer>

@code {
    private static Func<string, Task>? onCameraFrame;
    private string asciiVideo = "";
    private IList<UserVideo> otherVideos = new List<UserVideo>();
    private bool videoStarted = false;
    private string apiBaseUrl = "";
    private string clientId = Guid.NewGuid().ToString();
    private string username = "";
    private Timer? timer;
    private bool connected = false;
    private string Domain => NavManager.BaseUri;
    private int StreamCount => (videoStarted ? 1 : 0) + otherVideos.Count;

    private bool IsLoggedIn
    {
        get => !string.IsNullOrEmpty(username);
    }

    protected override async Task OnInitializedAsync()
    {
        
#if DEBUG
        // wait for debugging proxy to start
        // https://docs.microsoft.com/en-us/aspnet/core/blazor/debug?view=aspnetcore-6.0&tabs=visual-studio-code#breakpoints-in-oninitializedasync-not-hit
        await Task.Delay(2000);
#endif

        // get logged in user id
        try
        {
            var userInfo = await Http.GetFromJsonAsync<UserInformation>("/.auth/me", new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            });
            if (userInfo != null) 
            {
                username = userInfo.ClientPrincipal?.UserDetails ?? "";
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }

        // get Azure Web PubSub websocket URI
        var connectionInfo = await Http.GetFromJsonAsync<ConnectionResult>($"{apiBaseUrl}/api/connection");
        if (connectionInfo == null)
        {
            throw new Exception("Unable to retrieve connection string");
        }

        // connect to Azure Web PubSub
        var websocket = new ClientWebSocket();
        websocket.Options.AddSubProtocol("json.webpubsub.azure.v1");
        await websocket.ConnectAsync(new Uri(connectionInfo.Uri), CancellationToken.None);
        Console.WriteLine("Connected");
        connected = true;

        Action<Frame> onReceivedFrame = (frame) =>
        {
            var userVideo = otherVideos.FirstOrDefault(v => v.Frame?.ClientId == frame.ClientId);
            if (userVideo == null)
            {
                userVideo = new UserVideo();
                otherVideos.Add(userVideo);
            }
            userVideo.Frame = frame;
            StateHasChanged();
        };

        // start receiving messages
        _ = RunReceiveLoop(websocket, onReceivedFrame);

        // join group
        var joinGroupMessage = new
        {
            type = "joinGroup",
            group = "streamr",
            ackId = 1
        };

        Console.WriteLine("Joining group...");
        await websocket.SendAsync(
            Encoding.UTF8.GetBytes(JsonSerializer.Serialize(joinGroupMessage)),
            WebSocketMessageType.Text,
            true,
            CancellationToken.None);


        onCameraFrame = async (asciiString) =>
        {
            asciiVideo = asciiString;
            StateHasChanged();

            var frame = new Frame
            {
                ClientId = clientId,
                Ascii = asciiString
            };

            var message = new
            {
                type = "sendToGroup",
                group = "streamr",
                data = frame,
                dataType = "json",
                noEcho = true
            };

            if (!connected)
            {
                return;
            }

            await websocket.SendAsync(
                Encoding.UTF8.GetBytes(JsonSerializer.Serialize(message)),
                WebSocketMessageType.Text,
                true,
                CancellationToken.None);
        };

        // remove disconnected videos
        timer = new Timer((_) => {
            for (var i = otherVideos.Count - 1; i >= 0; i--)
            {
                var video = otherVideos[i];
                if (DateTime.Now - video.LastUpdated > TimeSpan.FromSeconds(4))
                {
                    otherVideos.Remove(video);
                }
            }
            StateHasChanged();
        }, null, 0, 5000);

    }

    private async Task StartVideo()
    {
        await JSRuntime.InvokeVoidAsync("start", 80, 40, 2);
        videoStarted = true;
    }

    private async Task StopVideo()
    {
        await JSRuntime.InvokeVoidAsync("location.reload");
    }

    private void Login()
    {
        NavManager.NavigateTo("/.auth/login/github", forceLoad: true);
    }

    private void Logout()
    {
        NavManager.NavigateTo("/.auth/logout", forceLoad: true);
    }

    [JSInvokable]
    public static async Task OnCameraFrame(string asciiString)
    {
        if (onCameraFrame != null)
        {
            await onCameraFrame.Invoke(asciiString);
        }
    }

    async Task RunReceiveLoop(ClientWebSocket websocket, Action<Frame> onFrame)
    {
        ArraySegment<byte> buffer = new (new byte[2048]);
        if (buffer.Array == null) throw new Exception("Buffer array is null");

        while(true)
        {
            WebSocketReceiveResult result;
            using var ms = new MemoryStream();
            do
            {
                result = await websocket.ReceiveAsync(buffer, CancellationToken.None);
                ms.Write(buffer.Array, buffer.Offset, result.Count);
            } while (!result.EndOfMessage);

            ms.Seek(0, SeekOrigin.Begin);
            var message = Encoding.UTF8.GetString(ms.ToArray());

            var response = JsonSerializer.Deserialize<ServerResponse>(message);
            if (response != null && response.type == "message" && response.data != null)
            {
                response.data.Username = response.fromUserId;
                onFrame(response.data);
            }
        }
    }

    public class ServerResponse
    {
        public string? type { get; set; }
        public string? from { get; set; }
        public string? fromUserId { get; set; }
        public Frame? data { get; set; }
    }
}